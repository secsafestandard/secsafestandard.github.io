<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[[Jenkins 9.1][Git]Jenkins CI-初探]]></title>
    <url>%2F2017%2F07%2F28%2FJenkins-Git-Jenkins-CI-%E5%88%9D%E6%8E%A2%2F</url>
    <content type="text"><![CDATA[作者：disappearedgod文章出处：http://blog.csdn.net/disappearedgod/article/details/43406019时间：2015-2-2 #0.前言 环境：linux（mint or others）目标：自动构建deb包任务简述：项目组需要一个可以自动构建的环境。其主要目的是自动生成一个linux下编译环境的安装包。其中，要维护3个github远端的git库，和一个自己服务器的打包文件。 #1.安装初步 进入官网选择最近版本1.进入官网，点击“Use Jenkins” 2.如果你想要安装Jenkins,点击”Installing Jenkins” 3.本文环境是在Linux下，可以用Unix的Ubuntu环境安装，apt-get 或者Debian包。 4.使用命令安装Jenkins 5.如果想要了解（建议你了解）安装做了什么，下面的话说了很多。 Jenkins的默认环境安装在了/var/lib/jenkins下面，本文使用了这个默认的文件夹，当然如果为了jenkins新建一个用户名后（这个是必须的，默认会新建），也可以放在/jenkins/home/下面。 部署jenkins的基本环境。包或了添加了jenkins的用户。Others. Jenkins为了能够跟java无缝对接，jenkins将一些部署的文件放在了war包里面，如果感兴趣可以尝试定制自己的东西。不过Jenkins并不欢迎你这么做。Tips:我发现其实Jenkins只是用了这几个目录。 /var/lib/jenkins /var/log/jenkins /var/cache/jenkins #2.Jenkins部署初步 2.1 重要概念 在部署前，先需要对jenkins进行简要理解。Jenkins是一个开源的实现持续集成的软件工具。官方网站：http://jenkins-ci.org/。也就是说，我们在项目中借用Jenkins来持续构建软件。就相当于托付别人办事一样，我们只能监督事情的目的，结果，而不需要也不应该参与事情办理打全过程。通过一些初步部署工作发现，Jenkins在CI过程中不会使用系统用户的权限，而是使用用户（你）赋予Jenkins的权限，用Jenkins来代理一切事物。（jenkins读取你在web中的配置，使用它在本地的权限，使用jenkins了解的ssh权限进行与远端的访问）如果，你在配置中遇到Permission Deny 或者是一些ssh key的问题，是因为你并没有理解上一段的含义。 2.2 jenkins插件 如果你只需要进行java的环境部署的话，恭喜你，系统已经预先安装了java需要的所有插件，这是因为jenkins的前身huston本来就是为了java的部署服务的，这不是本文讨论核心。对于Git来说，需要几个东西。Git plugin：这个插件是用来同步git库的。Multiply SCMs: 多个SCM通道，每一个SCM都可以部署一个Git。用过Git库的人会问道，Git plugins不是可以同步多个库么？为什么要用这个。答案是：尽管Git库可以同步多个git库，但是需要注意的是Git插件提供branch选项尽管可是该多个，但是是针对与每一个库同时检索多个branch，这个不符合我们使用的原则。对于部署来说，只需要调用一个Git库中的一个分支，所以我妈需要这个plugins。 2.3 jenkins的系统设置 如果你打开打是一个已经安装好打jenkins的话，就像下面打图一样，在默认的网址 localhost:8080中打开部署好的jenkins。如果是刚刚安装过的jenkins，则MainView中不会有东西。本文以Chrome浏览器为例，因为系统预装的是中文，所以jenkins可以识别，并对大部分内容进行了汉化。细心的人可能已经发现了右上角进入登录界面;如果是第一次使用打话没有登录，是以匿名用户身份进行设置的。不过没有关系，因为在权限设置前，匿名账户会获得所有权限的。 点击左侧的”系统管理“ 点击主界面中的”插件管理“，然后点击”可选插件“ 找到需要打插件，然后点在下方安装按钮。（PS：如果你找不到安装按钮，可以放大缩小浏览器的显示比例，jenkins并没有很好的研究web端界面）！可选插件 #3. Git 插件初探 首先，由于Jenkins没有默认安装Git插件，需要Git库同步时候，需要手动选择安装git插件。3.1 Git plugin 安装 3.1.1 未安装前的样子 下图是没有安装git库的时候的样子，发现“源码管理”中没有git，这是由于jenkins没有默认安装git插件的缘故。 3.1.2安装git plugin 在“系统管理”-&gt;“管理插件”中找到，“可选插件”选项卡。“过滤“（一个名为过滤的搜素窗口）中可以用键盘输入Git来查找。我们只点git plugin，jenkins会自动为我们添加其依赖的插件如下图。 等待安装，如果勾选下方的”安装完成后重启Jenkins“的话，会jenkins会重启；或者可以在浏览器中输入”localhost:8080/restart“来重启jenkins。 3.2 安装Multiple SCMs插件 尽管Git插件可以做到同步多个git库，但是只能同步多个git库的同一个分支，如果你的项目恰好需要不同库的不同分支进行同步的话，这就需要Multiple SCMs插件了。 等待安装 安装后的效果：在源码管理中可以点选”Multiple SCMs“![3-2-Multiple SCMs][3-2-Multiple SCMs.png] 点击”AddSCM“，点选Git，可以加入多个库。 3.3GitHub plugin 安装 3.3.1 安装 同样的在可选插件中选择”GitHub plugin“，jenkins同样会帮助你安装其依赖的其他插件。 3.3.2安装效果 可以在Build时候选择，”Build when a change is pushed to GitHub“，当GitHub更新的时候，重建。 3.4 新建Git项目 新建一个项目：（点击左栏菜单的新建）因为是要与Git同步，所以选择的是没有预先设置的项目(构建一个自由风格打软件项目 free-style)。 点击”OK”后看到下图，当然，会发现有些东西并没有向下面这么全（这是因为我安装了很多其他打插件去尝试，比如GerritRepo等，不过这个跟本文关系比较少，这里不做介绍） 选择”源码管理”下的”Git”选项 点击Add添加一个私钥，在A处填写你的姓名，将ssh生成的私钥用gedit or vi打开，将内容复制到B处。 如果发现，添加后有红色字体，则证明有问题，Jenkins在这里使用了一个简单的clone命令来尝试添加的私钥是否正确。（用ssh链接git库：git@github:yourteam/yourproject/） 这里可以该git的分支，默认分支是origin下的master分支，在界面中可以改为origin下的任意其他分支。 改变源为远端upstream源结果 3.5 GerritRepo插件 3.5.1 写在开始——需要注意的事情 GerritRepo需要做的内容完全可以在shell中进行，它的存在只不过是用来简练了代码。 #4. Shell &amp; Repo（python）Jenkins可以执行脚本，只要你装插件，php，python都可以跑。但是，本文发现，Jenkins中执行source语句并不理想，也许是因为Jenkins固定指向的sh是bash，而ubuntu中默认的是dash的原因。本文采取的方法是，将想要执行打语句写入一个脚本中，并在脚本第一行注释出用什么sh执行，来规避可能存在的风险。 本文采用在shell中直接读repo的绝对路径在初始化。 在workspace中编写一个sh，用bash执行。 #5. 其他 5.1 build部署 我们可以设置按照某种周期来执行build（与crontab中相似，5个参数代表了：小时，天，月，年，十年） 5.2 一个关键的设置 如果你没有设置build的策略很肯能出现这个问题，由于频率过高或者代码一直在更新，很短时间内，build版本号挤压太多。 而我们想要的结果是这样的，无论多少个build，都保留最近几天打build 只需要设置一下策略就好]]></content>
      <categories>
        <category>部署</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[[LeetCode]TwoSum]]></title>
    <url>%2F2017%2F07%2F27%2FLeetCode-TwoSum%2F</url>
    <content type="text"><![CDATA[作者：disappearedgod文章出处时间：2014-4-13 题目123456789Two SumGiven an array of integers, find two numbers such that they add up to a specific target number.The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.You may assume that each input would have exactly one solution.Input: numbers=&#123;2, 7, 11, 15&#125;, target=9Output: index1=1, index2=2 #思路： 1.克隆排序 2.双指针查找 3.对应返回位置 #解题C++ 版本123456789101112131415161718192021222324252627282930313233class Solution &#123;public: vector&lt;int&gt; twoSum(vector&lt;int&gt; &amp;numbers, int target) &#123; vector&lt;int&gt; num = numbers; std::sort(num.begin(),num.end()); int length = num.size(); int left = 0; int right = length -1; int sum = 0; vector&lt;int&gt; index; while(left&lt;right)&#123; sum = num[left]+num[right]; if(sum &gt; target) --right; else if(sum &lt; target) ++left; else&#123; for(int i = 0; i &lt; length ; ++i)&#123; if(index.size()==2) break; if(numbers[i]==num[left]) index.push_back(i+1); else if(numbers[i]==num[right]) index.push_back(i+1); &#125; return index; &#125; &#125; &#125;&#125;; java 版本-有问题123456789101112131415161718192021222324252627282930313233343536373839public class Solution &#123; public int[] twoSum(int[] numbers, int target) &#123; int[] num = numbers.clone(); Arrays.sort(num);//unstability sort int length = numbers.length; int left = 0; int right = length -1; int sum = 0; int[] index = new int[2]; while(left&lt;right)&#123; sum= num[left] + num[right]; if(sum&lt;target) ++left; else if(sum &gt; target) --right; else&#123; int count=0; for(int i = 0; i &lt; length; i++)&#123; if(count==2) break; if(numbers[i]==num[left])&#123; index[0]=i+1; ++count; continue; &#125; else if(numbers[i]==num[right])&#123; index[1]=i+1; ++count; continue; &#125; &#125; break; &#125; &#125; return index; &#125;&#125; 问题在于 if(numbers[i]==num[left]){如果两个因子相同，则只改变了left，而没有改变right，所以要用容器123456789101112131415161718192021222324252627282930313233343536373839public class Solution &#123; public int[] twoSum(int[] numbers, int target) &#123; int[] num = numbers.clone(); Arrays.sort(num);//unstability sort int length = numbers.length; int left = 0; int right = length -1; int sum = 0; int[] index = new int[2]; ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();// not int while(left&lt;right)&#123; sum= num[left] + num[right]; if(sum&lt;target) ++left; else if(sum &gt; target) --right; else&#123; list.clear(); for(int i = 0; i &lt; length; i++)&#123; if(list.size()==2) break; if(numbers[i]==num[left])&#123; list.add(i+1); &#125; else if(numbers[i]==num[right])&#123; list.add(i+1); &#125; &#125; break; &#125; &#125; int i = 0; for(Iterator it = list.iterator();it.hasNext();++i)&#123; index[i]=(int)it.next(); &#125; return index; &#125;&#125; 借鉴：http://blog.csdn.net/lilong_dream/article/details/19298357 [返回]]]></content>
  </entry>
  <entry>
    <title><![CDATA[LeetCode系列文章汇总]]></title>
    <url>%2F2017%2F07%2F27%2FLeetCode%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[作者：disappearedgod文章出处：http://blog.csdn.net/disappearedgod/article/details/23621903时间：2014-4-16 #前言 这里是一个刷题汇总的表格，前面刷题一般用的是大家代码的总结，可能注释和版本会多一些。Title里面分为两种超链接：一种是题目超链接来自官网，一种是解法的超链接来自本博客。LeetCode的真谛在于：遇到不懂 =&gt; 查答案 =&gt; 自己理解写出来或背下来 =&gt; 过一段时间后第二遍重做 #列表 ##图例 Diff 1(#FFFFFF) 2(#FFFF33) 3(#CC9933) 4(#FFCC99) 5(#99000) Freq 1(#FFFFFF) 2(#CCFFFF) 3(#3333FF) 4(#66CCCC) 5(#330099) No. Title Submit Date Algorithm Diff Freq 1 LeetCode-Two Sum &amp; Solution 2014/4/13 Hash(Set) &amp; sort 2(5) 5(5) 148 LeetCode-Sort List &amp; Solution 2014/4/15 List &amp;List sort - - 2 LeetCode -Add Two Numbers &amp; Solution 2014/4/16 List 3(5) 4(5) 147 LeetCode-Insertion Sort List &amp; Solution 2014/4/16(&amp;17) List &amp;List sort - - 19 LeetCode-Remove Nth Node From End of List &amp; Solution 2014/4/17 List 2(5) 3(5) 23 Leetcode-Swap Nodes in Pairs &amp; Solution 2014/4/17 List 3(5) 4(5) 24 LeetCode-Reverse Nodes in k-Group &amp; Solution 2014/4/18 List 2(5) 4(5) 56 Leetcode-Rotate List &amp; Solution 2014/4/22 List 4(5) 5(5) NULL Leetcode-Merge Two Sorted Lists &amp; Solution 2014/5/6 Merge &amp; List 3(5) 3(5) 82 Leetcode-Remove Duplicates from Sorted List II &amp; Solution 2014/5/6 List 3(5) 3(5) 83 Leetcode-Remove Duplicates from Sorted List &amp; Solution 2014/5/9 List 1(5) 3(5) NULL Leetcode-Partition List &amp; Solution 2014/8/19 List (5) (5) 92 Leetcode-Reverse Linked List II &amp; Solution 2014/4/18 List 3(5) 2(5) NULL Leetcode-Linked List Cycle II &amp; Solution 2014/8/19 List (5) (5) NULL Leetcode-Linked List Cycle &amp; Solution 2014/8/19 List (5) (5) NULL Leetcode-Reorder List &amp; Solution 2014/8/20 List (5) (5) NULL LeetCode-LRU Cache &amp;Solution 2014/8/18 List (5) (5) 125 LeetCode-Valid Palindrome&amp;Solution 2014/4/23 Two Pointers &amp; String 2(5) 5(5) 88 LeetCode-Merge Sorted Array&amp;Solution 2014/4/23 List 2(5) 5(5) 8 LeetCode-String to Integer (atoi)&amp;Solution 2014/4/24 string &amp; Regular Expression 2(5) 5(5) 98 LeetCode-Validate Binary Search Tree &amp;Solution 2014/5/19 Tree 3(5) 5(5) NULL LeetCode-Binary Tree Level Order Traversal &amp;Solution 2014/8/28 Tree (5) (5) 129 LeetCode-Sum Root to Leaf Numbers &amp;Solution 2014/5/24 Tree &amp; DFS 2(5) 4(5) NULL LeetCode-Convert Sorted Array to Binary Search Tree &amp;Solution 2014/6/5 Tree &amp; Sort Array 2(5) 3(5) 112 LeetCode-Path Sum &amp;Solution 2014/5/23 Tree 1(5) 3(5) 116 LeetCode-Populating Next Right Pointers in Each Node &amp;Solution 2014/6/3 Tree 3(5) 3(5) NULL LeetCode-Populating Next Right Pointers in Each Node II &amp;Solution 2014/8/29 Tree (5) (5) NULL LeetCode-Flatten Binary Tree to Linked List &amp;Solution 2014/6/6 Tree &amp; list (5) (5) NULL LeetCode-Binary Tree Zigzag Level Order Traversal &amp; Solution 2014/5/26 Tree (5) (5) NULL LeetCode-Construct Binary Tree from Preorder and Inorder Tree &amp; Solution –/-/-/ Tree (5) (5) NULL LeetCode-Construct Binary Tree from Inorder and Postorder Tree &amp; Solution –/-/-/ Tree (5) (5) NULL LeetCode-Recover Binary Search Tree &amp; Solution –/-/-/ Tree (5) (5) 101 LeetCode-Symmetric Tree &amp;Solution 2014/5/14 Tree (5) (5) 110 LeetCode-Balanced Binary Tree &amp; Solution 2014/5/20 Tree (5) (5) NULL LeetCode-Path Sum II &amp;Solution –/-/-/ Tree (5) (5) NULL LeetCode-Binary Tree Inorder Traversal &amp;Solution 2014/8/30 Tree (5) (5) NULL LeetCode-Binary Tree Maximum Path Sum &amp;Solution –/-/-/ Tree (5) (5) NULL LeetCode-Binary Tree Level Order Traversal II &amp;Solution 2014/5/26 Tree (5) (5) 100 LeetCode-Same Tree &amp;Solution 2014/5/14 Tree (5) (5) NULL LeetCode-Minimum Depth of Binary Tree &amp;Solution 2014/6/7 Tree &amp; DFS (5) (5) NULL LeetCode-Unique Binary Search Trees II &amp;Solution 2014/6/13 Tree &amp; DP (5) (5) NULL LeetCode-Unique Binary Search Trees &amp;Solution 2014/6/5 Tree &amp; DP (5) NULL LeetCode-Binary Tree Preorder Traversal &amp; Solution 2014/5/23 Tree (5) (5) NULL LeetCode-Binary Tree Postorder Traversal &amp; Solution 2014/6/4 Tree &amp; Solution (5) (5) NULL LeetCode-Longest Valid Parentheses &amp;Solution 2014/6/11 String &amp; DP (5) (5) NULL LeetCode-Wildcard Matching &amp; Solution 2014-6-10 DP &amp; Greedy &amp; String (5) (5) NULL LeetCode-Maximum Subarray &amp; Solution 2014/6/12 DP (5) (5) NULL LeetCode-Unique Paths &amp; Solution 2014/6/12 DP (5) (5) NULL LeetCode-Unique Paths II &amp; Solution 2014/6/12 DP (5) (5) NULL LeetCode-Minimum Path Sum &amp; Solution 2014/6/12 DP (5) (5) NULL LeetCode-Climbing Stairs &amp; Solution 2014/6/12 DP (5) (5) NULL LeetCode-Edit Distance &amp; Solution 2014/6/18 DP &amp; String (5) (5) NULL LeetCode-Maximal Rectangle &amp; Solution –/–/– DP (5) (5) NULL LeetCode-Scramble String &amp; Solution –/–/– DP &amp; String (5) (5) NULL LeetCode-Decode Ways &amp; Solution –/–/– DP (5) (5) NULL LeetCode-Unique Binary Search Trees II &amp;Solution 2014/6/13 Tree &amp; DP (5) (5) NULL LeetCode-Unique Binary Search Trees &amp;Solution 2014/6/5 Tree &amp; DP (5) (5) NULL LeetCode-Interleaving String &amp;Solution 2014/9/1 DP &amp; String (5) (5) NULL LeetCode-Distinct Subsequences &amp; Solution 2014/8/31 DP &amp; String (5) (5) NULL LeetCode-Triangle &amp;Solution 2014/9/1 DP &amp; Tree (5) (5) NULL LeetCode-Best Time to Buy and Sell Stock &amp; Solution –/–/– DP (5) (5) NULL LeetCode-Best Time to Buy and Sell Stock III &amp; Solution –/–/– DP (5) (5) NULL LeetCode-Palindrome Partitioning II &amp; Solution –/–/– DP &amp; String (5) (5) NULL LeetCode-Best Time to Buy and Sell Stock II &amp; Solution –/–/– Greedy (5) (5) NULL LeetCode-Wildcard Matching &amp; Solution 2014-6-10 Greedy (5) NULL LeetCode-String to Integer (atoi)&amp;Solution 2014/4/24 [String] (5) (5) NULL LeetCode-Longest Valid Parentheses &amp;Solution 2014/6/11 [String] (5) (5) NULL LeetCode-Valid Parentheses &amp; Solution 2014/8/21 [String] (5) (5) NULL LeetCode-Generate Parentheses &amp; Solution –/–/– [String] (5) (5) NULL LeetCode-Valid Palindrome&amp;Solution –/–/– [String] (5) (5) NULL LeetCode-Implement strStr() &amp; Solution 2014/8/22 [String] &amp; KMP (5) (5) NULL LeetCode-Palindrome PartitioningI &amp; II &amp; Solution [String] (5) (5) NULL LeetCode-Decode Ways &amp; Solution [String] (5) (5) NULL LeetCode-Add Binary &amp; Solution 2014/9/14 [String] (5) (5) NULL LeetCode-Anagrams &amp;Solution 2014/9/1 [String] (5) (5) NULL LeetCode-Letter Combinations of a Phone Number &amp;Solution 2014/10/4 [String] (5) (5) NULL LeetCode-Restore IP Addresses &amp; Solution [String] (5) (5) NULL LeetCode-Edit Distance &amp; Solution 2014/6/18 [String] &amp; DP (5) (5) NULL LeetCode-Palindrome Partitioning II &amp; Solution –/–/– [String] (5) (5) NULL LeetCode-Regular Expression Matching &amp; Solution –/–/– [String] (5) (5) NULL LeetCode-Wildcard Matching &amp; Solution 2014-6-10 [String] (5) (5) NULL LeetCode-Multiply Strings &amp; Solution –/–/– [String] (5) (5) NULL LeetCode-Distinct Subsequences &amp; Solution 2014/8/31 DP &amp; [String] (5) (5) NULL LeetCode-Scramble String &amp; Solution –/–/– DP &amp; String] (5) (5) NULL LeetCode-Interleaving String &amp;Solution 2014/9/1 DP &amp; [String] (5) (5) NULL LeetCode-Longest Substring Without Repeating Characters &amp;Solution [String] (5) (5) NULL LeetCode-Valid Number &amp; Solution –/–/– (5) (5) NULL LeetCode-Count and Say &amp; Solution 2014/9/1 [String] (5) (5) NULL LeetCode-Minimum Window Substring &amp; Solution –/–/– [String] (5) (5) NULL LeetCode-Longest Palindromic SubString &amp;Solution –/–/– [String] (5) (5) NULL LeetCode-Text Justification &amp; Solution –/–/– [String] (5) (5) NULL LeetCode-Valid Number &amp; Solution –/–/– [String] (5) (5) NULL LeetCode-Simplify Path &amp; Solution 2014/9/18 [String] (5) (5) NULL LeetCode-Substring with Concatenation of All Words &amp; Solution –/–/– [String] (5) (5) NULL LeetCode-ZigZag Conversion &amp; Solution –/–/– [String] (5) (5) NULL LeetCode-Longest Common Prefix &amp; Solution –/–/– [String] (5) (5) NULL LeetCode-Length of Last Word &amp;Solution 2014/8/27 [String] (5) (5) NULL LeetCode-N-Queens &amp;Solution 2014/9/10 (5) (5) NULL LeetCode-Remove Duplicates from Sorted Array &amp;Solution 2014/9/12 (5) (5) NULL LeetCode-Gray Code &amp;Solution 2014/9/12 (5) NULL LeetCode-Sort Colors &amp;Solution 2014/9/12 (5) NULL LeetCode-Pascal’s Triangle &amp;Solution 2014/9/12 (5) NULL LeetCode-Search in Rotated Sorted Array &amp;Solution 2014/9/12 (5) NULL LeetCode-Plus One &amp;Solution 2014/9/13 (5) NULL LeetCode- (5) NULL LeetCode-Convert Sorted List to Binary Search Tree &amp; Solution 2014/8/19 List、Tree、Sorted (5) (5) NULL LeetCode-Permutation Sequence &amp;Solution 2014/8/13 permutation (5) (5) NULL LeetCode-Next Permutation &amp; Solution (5) NULL LeetCode-Permutations &amp;Solution 2014/9/28 permutation (5) NULL LeetCode-Permutations II &amp; Solution (5) NULL LeetCode-Search a 2D Matrix &amp;Solution 2014/6/5 Bi-Search (5) (5)]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[我的介绍]]></title>
    <url>%2F2017%2F07%2F26%2F%E6%88%91%E7%9A%84%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[基本信息教育经历####天津大学 （2012/09–2015/01）专业名称：计算机工程学历：硕士是否统招：是 ####四川大学（2008/09–2012/07）专业名称：计算机科学与技术学历：本科是否统招：是 #经历 工作经历软件工程师|ISCAS （2015.01 － 至今）地点：北京 制定内部数据展示平台前段框架设计，应用MVVM设计模式进行具体页面功能特效的实现； 负责前段开发标准制定的相关工作； 曾经做过项目：1） RioChat-即时通讯：基于Node.js&amp;&amp;backbone的页面具体开发及数据库管理；2)基于NodeJS的Web操作系统：后台ajax与json服务开发；3）Windows内核分析:4） 数据展示平台：涉及HTML/CSS/JS等WEB前端技术；依托于Vue.js数据绑定的等前端应用；Karaph Web前端开发5） 应用仓库：前台javascript（Bootsrap &amp;&amp; Handlebars &amp;&amp; DataTables）6）词云可视化数据可视化：基于ELK（Logstash &amp;&amp; ElasticSearch &amp;&amp; Kibana）的应用信息等数据可视化 实习经历实习生中新生态城管理委员会（2012.06 － 2014.08) ####项目业绩：采用B/S结构，使用 C# Workflow 进行审批工作流开发，通过WCF进行数据通信，使用Microsoft Silverlight 进行表现层设计 ###实习生中国移动通信有限公司（2012.01 － 2012.06） ####职责业绩：进行核心计算方法设计讨论，提出了3种基于信令数据来定位基站位置的新算法。生成jar包作为核心代码供其他公司使用。 词云可视化（2017/06–至今）使用语言及环境：使用语言： JavaScript &amp;&amp; Python框架： django其他相关： ElasticSearch &amp; Kibana （&amp; LogStash）模式： Browser - Server数据库： Mysql开发环境 : Windows &amp; Mac(不受限制) 项目描述：项目创建了一种用来展示应用兼容性的可视化场景，主要显示了windows应用在wine&amp;&amp;Linux场景中应用的各种不同状态（运行、安装、执行），已经wine启动的log中的bug直观的展示。 项目职责： 数据清洗：从整理的数据库文件整理出可以运行的数据; 数据展示：开发了数据展示界面（DataTables with Django），可以让用户通过点击按钮的方式进行筛选。 项目业绩:前端页面显示（javascript &amp;&amp; django） 数据仓库-兼容windows应用管理工具（2017/04–至今）使用语言及环境：使用语言： JavaScript &amp;&amp; PHP框架： HTML5其他相关： ElasticSearch &amp; Kibana （&amp; LogStash）模式： Browser - Server数据库： Mysql开发环境 : Windows &amp; Mac(不受限制) 项目描述：为了一种新型操作系统（基于linux内核与wine的操作系统）提供一个展示该系统可支持软件的应用软件工具。 项目职责： 提供了前端HTML5展示部分： 承接ElasticSearch的数据展示部分。 关于windows应用分析的展示系统demo （2017/02–2017/05）使用语言及环境：使用语言： JavaScript &amp;&amp; PHP框架： Vue.js模式： Browser - Server数据库： MySql开发环境 : 不受限制 项目描述：（Vue.js &amp;&amp; PHP&amp;&amp;MySQL）为了有效展示每个应用（windows application）对应链接库的调用关系，而做的一个前台基于HTML5、后端基于PHP，数据库存储于单机MySQL的有效的调用关系。 项目职责：个人独自承接了除讨论需求之外的开发任务。包括了前台设计，数据库表对接设计，后台数据模型设计等。 项目业绩：有效展示了应用的动态链接库的调用关系，在控制台中可以对每个应用的调用关系得到有效的认知。 Windows内核分析 （2016/12–2017/02）使用语言及环境：使用语言： C框架： -模式： Core数据库： -开发环境 : Linux 项目描述：1.调研wine开源操作系统的文件相关 项目职责：调研ELF/PE不同目标格式下的文件解析、链接等内容 项目业绩：（Linux Kernel &amp;&amp; Wrk &amp;&amp; wine &amp;&amp; C） 桌面搜索（2016/04–2016/12） 使用语言及环境：使用语言： javascipt（DataTables.js &amp; ElasticSearch.js） &amp;&amp; Java Restful框架： BootStrap模式： Brower-Server数据库： MongoDB开发环境 : Ubuntu（不受限制） 项目描述：linux单机内的桌面应用。 可以做到用户进程搜索类：进程、镜像搜索（docker）、镜像进程搜索（docker），其他类（java）等进程状态显示、查询、过滤、排序等功能； Web外部搜索链接； 图像搜索：以图搜图与关键词查询； 项目职责：做为该项目的核心开发人员，职责如下： 负责Web前端的数据及其绑定工作，包括了数据库查询，函数绑定等； 负责进程、docker进程后端数据规整及其前端DataTable显示（调用本地Linux控制台，将数据制表后显示）； 负责图像搜索的前台展示模块； 项目业绩： HTML5跨平台服务，可以在node-webkit和浏览器中展示。 独自实现前端功能。 Riochat-即时通讯（2015/07–2016/04）使用语言及环境：使用语言： Node.js框架： HTML5 &amp;&amp; Backbone模式： Brower-Server数据库： MongoDB开发环境 : Ubuntu（不受限制） 项目描述:一款面向web的即时通讯软件。能做到一对一，一对多通讯，消息历史信息查询，消息撤回。包含了邮件通讯，发送信息等扩展功能。 项目职责:熟悉backbone.js与MVVM开发模式，通过Ajax跨域访问等方式调用相应数据。维护和开发消息功能：从前端到后台的所有内容。基于MongoDB数据库维护和开发。 项目业绩:基于Web前端技术（HTML5）和MVVM涉及模式，进行具体功能页面开发：包括了ajax等跨域访问； 第四代新型桌面项目（2015/01–2015/07）使用语言及环境：使用语言：Node.js框架： HTML5 &amp;&amp; Webkit数据库：Sqlite3开发环境 : Ubuntu（不受限制） 项目描述：实现了一种基于HTML5（node-webkit）跨平台、跨设备的一款linux应用。 项目职责：读写数据文件（sqlite3）到前台；Web前台功能点开发。 项目业绩：实现了具体node.js的功能开发；实现了项目代码从JS5到Promise化，为了JS6语法规范的过度做准备。 ##实习经历 中新天津生态城公用事业配套服务管理平台 （2012/08–2014/08）使用语言及环境：使用语言：.NET框架： WCF &amp;&amp; Silverlight模式： Client-Server数据库：SQLServer 2008开发环境 : Windows 项目描述：中新生态城在基础设施建设过程中，投资公司需要对生态城基础设施的建设情况进行信息化可视化的管理，流程包括了：地产开发商申请、投资公司审核、专业公司设计、统计分析等。 项目职责：作为项目负责人员，从确定需求与业务流程、搭建框架以及工作流开发等业务。作为开发人员，主要完成了系统中的所有涉及表单处理流程的开发。 项目业绩：采用B/S结构，使用 C# Workflow 进行审批工作流开发，通过WCF进行数据通信，使用Microsoft Silverlight 进行表现层设计。 基于信令数据的移动探测算法研究(JAVA)（2012/01–2012/06） 项目职务：实习生 使用语言及环境：使用语言：Java框架： No模式： jar数据库： No开发环境 : Windows（不受限制） 项目描述：基于位置的服务是指以移动通讯设备（如手机、汽车定位器）的定位为基础的服务。 项目职责：提供核心算法（LBS等）支持。用系列学习算法计算出信号基站位置。 项目业绩：进行核心计算方法设计讨论，提出了3种基于信令数据来定位基站位置的新算法。生成jar包作为核心代码供其他公司使用。（具体算法：结合物理模型提出的基于基站扇区的算法:分为基于基站扇区内信令数据的定位基站算法和基于重叠小区中信令数据定位基站算法。实验结果表明，基于基站扇区的定位基站算法效果好于其他两种算法 ##技能 ###编程语言 语言 年限 用途 熟悉框架 java 2 years 实验算法 - c# 2 years 设计系统 MCF javascript 2 years Web开发 Angular.js css 2 years Web开发 BootStrap Node.js 2 years Web开发 Backbone.js &amp; Vue.js python 1 year 算法 (Notbook) python 1 year Web后端开发 dangle ###搜索引擎：ElasticSearch 可视化：ELK Stack：ElastcSearch &amp;&amp; Kibana &amp;&amp; Logstach ###其他DataTables.js ##开源关注 ###Quantaxis ##]]></content>
      <categories>
        <category>简历</category>
      </categories>
      <tags>
        <tag>个人介绍</tag>
        <tag>简历</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F07%2F26%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>